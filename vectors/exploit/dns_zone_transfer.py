#!/usr/bin/env python
import dns.resolver
import dns.query
import dns.zone
from dns.exception import DNSException
from dns.zone import BadZone, NoSOA, NoNS, UnknownOrigin

from utils import general_utilities
from utils import dns_utilities
from core.base.abstract_vector import base_vector


class dns_zone_transfer(base_vector):
    result = []
    banner = general_utilities.generate_banner("Dns Information")
    header = ["Type", "Host"]

    def prepare(self, target, vector_args):
        if "://" in target:
            target = general_utilities.get_domain(target)
        self.target = target

    def execute(self):
        host = str(self.target)
        answer = dns_utilities.get_NS_records(host)
        ns = []
        ns = [str(item[1]) for item in answer]

        for name in ns:
            axfr_query = dns.query.xfr(name, host, timeout=5, relativize=False, lifetime=10)

            try:

                zone = dns.zone.from_xfr(axfr_query, relativize=False)
                if not str(zone.origin).rstrip('.'):
                    raise dns.zone.UnknownOrigin
                print zone


            except NoSOA:
                pass
                # raise Exception('The zone has no SOA RR at its origin')
            except NoNS:
                pass
                # raise Exception('The zone has no NS RRset at its origin')
            except UnknownOrigin:
                pass
                # raise Exception('The zone\'s origin is unknown')
            except BadZone:
                pass
                # raise Exception('The zone is malformed')
            except DNSException, e:
                pass
                # if not str(e):
                #     raise Exception('Transfer Failed')
                # raise Exception(str(e))



                # def output(self):
                #
                #
                #     banner = general_utilities.generate_banner("Dns Information")
                #     header = ["Type","Host"]
                #
                #
                #     return banner, self.result, header
